on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          npm i

      - name: Lint code
        run: |
          npm run lint

      - name: Run tests
        run: |
          npm run test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lerni-dev-repository
          IMAGE_TAG: ${{ github.sha }}
          PORT: 3000
          JWT_SECRET: ${{secrets.JWT_SECRET}}
          SPRING_SERVICE_URL: ${{secrets.SPRING_SERVICE_URL}}
          EMAIL_HOST: ${{secrets.EMAIL_HOST}}
          EMAIL_USER: ${{secrets.EMAIL_USER}}
          EMAIL_PASSWORD: ${{secrets.EMAIL_PASSWORD}}
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}
          ENVIRONMENT: development
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg PORT="$PORT" --build-arg DATABASE_URL="$DATABASE_URL" --build-arg POSTGRES_USER="$POSTGRES_USER" --build-arg POSTGRES_PASSWORD="$POSTGRES_PASSWORD" --build-arg JWT_SECRET="$JWT_SECRET" --build-arg SPRING_SERVICE_URL="$SPRING_SERVICE_URL" --build-arg EMAIL_HOST="$EMAIL_HOST" --build-arg EMAIL_USER="$EMAIL_USER" --build-arg EMAIL_PASSWORD="$EMAIL_PASSWORD" --build-arg SENTRY_DSN="$SENTRY_DSN" --build-arg OPENAI_API_KEY="$OPENAI_API_KEY" --build-arg ENVIRONMENT="$ENVIRONMENT" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        env:
          TASK_DEFINITION: lerback-develop
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition-dev.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-dev.json
          container-name: lerback-develop
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: lerback-develop
          cluster: cluster-develop
          wait-for-service-stability: true
